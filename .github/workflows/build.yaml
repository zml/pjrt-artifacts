name: PJRT GPU library
on:
  push:
    tags:
      - "*"
  pull_request:
  workflow_dispatch:
    inputs:
      xla_commit:
        required: true
        type: string
        default: "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  XLA_COMMIT: ${{ inputs.xla_commit || '6319f0d3bdfd3078e04bb984a759c890b7116484' }}
  TF_ROCM_AMDGPU_TARGETS: "gfx900,gfx906,gfx908,gfx90a,gfx940,gfx941,gfx942,gfx1030,gfx1100"

jobs:
  setup_openxla:
    runs-on: ubuntu-latest
    steps:
      - name: "Checking out repository"
        uses: actions/checkout@v4
        with:
          path: "pjrt-artifacts"
      - name: "Checking out openxla repository"
        uses: actions/checkout@v4
        with:
          ref: ${{ env.XLA_COMMIT }}
          repository: openxla/xla
          path: "xla"
      - name: Apply patches to openxla
        id: patches
        working-directory: ./xla
        run: |
          xla_commit=$(git rev-parse HEAD)
          echo "XLA_COMMIT_ID=$xla_commit" >> $GITHUB_OUTPUT
          echo ::notice::Applying patches to openxla $xla_commit
          for patch in $(ls ../pjrt-artifacts/openxla/patches/*.patch | sort); do
              echo "Applying patch $patch"
              git apply "$patch"
          done
      - name: Upload openxla repository artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: xla-${{ steps.patches.outputs.XLA_COMMIT_ID }}
          path: ./xla

  pjrt-artifacts:
    runs-on: ${{ matrix.pjrt.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        pjrt:
          - target: cuda
            config: "--config=cuda"
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_gpu_plugin.so
            renamed_artifact: libpjrt_cuda.so
            runs_on: ["runs-on", "runner=32cpu-linux-x64", "image=ubuntu22-amd64"]
            platform: linux-amd64
            bazel_target: //xla/pjrt/c:pjrt_c_api_gpu_plugin
          - target: rocm
            config: "--config=rocm_ci_hermetic"
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_gpu_plugin.so
            renamed_artifact: libpjrt_rocm.so
            runs_on: ["runs-on", "runner=32cpu-linux-x64", "image=ubuntu22-amd64"]
            platform: linux-amd64
            bazel_target: //xla/pjrt/c:pjrt_c_api_gpu_plugin
          - target: cpu
            config: "--config=release_macos_arm64 --macos_sdk_version=15.5"
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_cpu_plugin.dylib
            runs_on: ["self-hosted", "macOS"]
            renamed_artifact: libpjrt_cpu.dylib
            platform: darwin-arm64
            bazel_target: //xla/pjrt/c:pjrt_c_api_cpu_plugin
          - target: cpu
            config: "--config=release_macos_base --macos_sdk_version=15.5"
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_cpu_plugin.dylib
            renamed_artifact: libpjrt_cpu.dylib
            runs_on: ["self-hosted", "macOS"]
            platform: darwin-amd64
            bazel_target: //xla/pjrt/c:pjrt_c_api_cpu_plugin
          - target: cpu
            config: ""
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_cpu_plugin.so
            renamed_artifact: libpjrt_cpu.so
            runs_on: ["runs-on", "runner=32cpu-linux-x64", "image=ubuntu22-amd64"]
            platform: linux-amd64
            bazel_target: //xla/pjrt/c:pjrt_c_api_cpu_plugin

    needs: ["setup_openxla"]
    steps:
      - name: "Checking out repository"
        uses: actions/checkout@v4
        with:
          path: "pjrt-artifacts"

      - name: Download xla artifact
        uses: actions/download-artifact@v4
        with:
          name: xla-${{ env.XLA_COMMIT }}
          path: xla

      - name: Setup Bazel
        run: |
          mkdir -p ~/bin/
          wget https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-${{ matrix.pjrt.platform }} -O ~/bin/bazel
          chmod +x ~/bin/bazel

      - name: "Setup bazelrc for openxla"
        run: |
          cp pjrt-artifacts/openxla/bazelrc/${{ matrix.pjrt.target }}.bazelrc xla/xla_configure.bazelrc

      - name: "Build ${{ matrix.pjrt.target }} ${{ matrix.pjrt.platform }}"
        working-directory: ./xla
        # todo: --disk_cache=/tmp/cache \
        run: |
          ~/bin/bazel \
              --output_base=/tmp/bazel_output_base_${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }} \
              build \
              --spawn_strategy=processwrapper-sandbox \
              ${{ matrix.pjrt.config }} \
              ${{ matrix.pjrt.bazel_target }}

      - name: Set file at the right path
        working-directory: ./xla
        run: |
          cp ${{ matrix.pjrt.artifact }} ../${{ matrix.pjrt.renamed_artifact }}

      - name: Strip binary and rpath
        if: matrix.pjrt.platform == 'darwin-arm64' || matrix.pjrt.platform == 'darwin-amd64'
        working-directory: ./xla
        run: |
          strip -x -o ../${{ matrix.pjrt.renamed_artifact }} ${{ matrix.pjrt.artifact }}
          install_name_tool -id '@rpath/${{ matrix.pjrt.renamed_artifact }}' ../${{ matrix.pjrt.renamed_artifact }}

      - name: Create compressed ${{ matrix.pjrt.target }} ${{ matrix.pjrt.platform }} release file
        uses: a7ul/tar-action@v1.2.0
        with:
          command: c
          cwd: ./
          files: |
            ./${{ matrix.pjrt.renamed_artifact }}
          outPath: pjrt-${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }}.tar.gz

      - name: Upload ${{ matrix.pjrt.target }} ${{ matrix.pjrt.platform }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjrt-${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }}.tar.gz
          path: pjrt-${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }}.tar.gz

  release:
    needs: ["pjrt-artifacts"]
    runs-on: ubuntu-latest
    steps:
      - run: rm -rf pjrt*.tar.gz
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        if: startsWith(github.ref, 'refs/tags/')
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *.tar.gz/*.tar.gz
