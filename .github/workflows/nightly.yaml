name: nightly - PJRT CUDA library
on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: '0 */4 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  TF_ROCM_AMDGPU_TARGETS: "gfx900,gfx906,gfx908,gfx90a,gfx940,gfx941,gfx942,gfx1030,gfx1100"
  ROCM_PATH: "/opt/rocm-6.4.1/"

jobs:
  nightly-pjrt-artifacts:
    strategy:
      matrix:
        pjrt:
          - target: cuda
            bazel_opts: ""
            config: "--disk_cache=/home/runner/.cache/bazel-disk --config=cuda"
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_gpu_plugin.so
            renamed_artifact: libpjrt_cuda.so
            runs_on: ["runs-on", "runner=32cpu-linux-x64", "image=ubuntu22-amd64"]
            platform: linux-amd64
            bazel_target: //xla/pjrt/c:pjrt_c_api_gpu_plugin
          - target: rocm
            bazel_opts: ""
            config: "--disk_cache=/home/runner/.cache/bazel-disk --config=rocm_ci_hermetic"
            artifact: bazel-bin/xla/pjrt/c/libpjrt_c_api_gpu_plugin.so
            renamed_artifact: libpjrt_rocm.so
            runs_on: ["runs-on", "runner=32cpu-linux-x64", "image=ubuntu24-amd64"]
            platform: linux-amd64
            bazel_target: //xla/pjrt/c:pjrt_c_api_gpu_plugin

    runs-on: ${{ matrix.pjrt.runs_on }}
    steps:
      - uses: runs-on/action@v1

      - uses: runs-on/snapshot@v1
        with:
          path: /home/runner/.cache/bazel-disk
          volume_size: 350

      - name: TMP fix for the mount user
        if: matrix.pjrt.platform != 'darwin-arm64' && matrix.pjrt.platform != 'darwin-amd64'
        run: sudo chown -R runner:runner /home/runner/.cache/

      - name: Download ROCm toolchain (not fully hermetic)
        if: matrix.pjrt.target == 'rocm'
        run: |
          sudo apt install llvm-18 lld-18 clang-18 libnuma-dev -y
          wget https://repo.radeon.com/amdgpu-install/6.4.1/ubuntu/noble/amdgpu-install_6.4.60401-1_all.deb
          sudo apt install ./amdgpu-install_6.4.60401-1_all.deb -y
          sudo amdgpu-install --usecase=hiplibsdk --no-dkms -y

      - name: "Checking out repository"
        uses: actions/checkout@v4
        with:
          path: "pjrt-artifacts"

      - name: "Checking out openxla repository"
        uses: actions/checkout@v4
        with:
          ref: main
          repository: openxla/xla
          path: "xla"

      - name: Apply patches to openxla
        id: patches
        working-directory: ./xla
        run: |
          xla_commit=$(git rev-parse HEAD)
          echo "XLA_COMMIT_ID=$xla_commit" >> $GITHUB_OUTPUT
          echo ::notice::Applying patches to openxla $xla_commit
          for patch in $(ls ../pjrt-artifacts/openxla/patches/*.patch | sort); do
              echo "Applying patch $patch"
              git apply "$patch"
          done

      - uses: bazel-contrib/setup-bazel@0.15.0
        if: matrix.pjrt.platform != 'darwin-arm64' && matrix.pjrt.platform != 'darwin-amd64'
        with:
          bazelisk-version: 1.26.0
          bazelisk-cache: false
          bazelrc: |
            common --verbose_failures
            common --keep_going
            common --test_output=streamed
            common --color=yes
            common --show_timestamps
            build  --spawn_strategy=processwrapper-sandbox

      - name: "Setup bazelrc for openxla"
        run: |
          cp pjrt-artifacts/openxla/bazelrc/${{ matrix.pjrt.target }}.bazelrc xla/xla_configure.bazelrc

      - name: "Build ${{ matrix.pjrt.target }} ${{ matrix.pjrt.platform }}"
        working-directory: ./xla
        run: |
          bazel ${{ matrix.pjrt.bazel_opts }} build ${{ matrix.pjrt.config }} ${{ matrix.pjrt.bazel_target }}

      - name: Set file at the right path
        working-directory: ./xla
        run: |
          cp ${{ matrix.pjrt.artifact }} ../${{ matrix.pjrt.renamed_artifact }}

      - name: Create compressed ${{ matrix.pjrt.target }} ${{ matrix.pjrt.platform }} release file
        uses: a7ul/tar-action@v1.2.0
        with:
          command: c
          cwd: ./
          files: |
            ./${{ matrix.pjrt.renamed_artifact }}
          outPath: pjrt-${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }}.tar.gz

      - name: Upload ${{ matrix.pjrt.target }} ${{ matrix.pjrt.platform }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjrt-${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }}.tar.gz
          path: pjrt-${{ matrix.pjrt.target }}_${{ matrix.pjrt.platform }}.tar.gz
          compression-level: 0 # no compression
